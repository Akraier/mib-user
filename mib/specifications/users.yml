openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /create_user:
    post:
      summary: Add a new user
      tags:
        - User
      operationId: mib.resources.users.create_user
      requestBody:
        description: Create a new customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
        200:
          description: User already exists
        default:
          description: Error during creation of the user
  /users:
    get:
      summary: Retrieve a list of users
      tags:
        - User
      operationId: mib.resources.users.get_list_of_users
      responses:
        200:
          description: List of user
        404:
          description: No list found
        default:
          description: Error while getting list of user
  /user/{user_id}:
    get:
      tags: [ User ]
      description: Get a user by its id
      operationId: mib.resources.users.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
    delete:
      tags: [ User ]
      description: set the value of "is_active" to false
      operationId: mib.resources.users.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User "deleted"
        404:
          description: User not found
        default:
          description: An error occured during deleting the user
    put:
      tags: [ User ]
      description: Update a user
      operationId: mib.resources.users.update_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
                firstname:
                  type: string
                  description: Firstname of the user
                lastname:
                  type: string
                  description: Lastname of the user
                birthdate:
                  type: string
                  description: Birthdate of the user
              required: ['filter', 'id', 'email', 'password', 'firstname', 'lastname', 'birthdate']
              $ref: '#/components/schemas/User'
      responses:
        202:
          description: User "updated"
        404:
          description: User not found
        default:
          description: An error occured during updating the user
  /report_user/{user_id}:
    post:
      tags: [ User ]
      description: set the value of "is_active" to false
      operationId: mib.resources.users.report_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User reported
        404:
          description: User not found
        default:
          description: An error occured during reporting the user
  #/delete/{user_id}:
  #  put:
  #    tags: [ User ]
  #    description: Update a user
  #    operationId: mib.resources.users.update_user
  #    parameters:
  #      - name: user_id
  #        description: User Unique ID
  #        in: path
  #        required: true
  #        schema:
  #          type: integer
  #          format: int64
  #    requestBody:
  #      description: Update a user
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            type: object
  #            properties: 
  #              email: 
  #                type: string
  #                description: Email of the user
  #              password:
  #                type: string
  #                description: Password of the user
  #              firstname:
  #                type: string
  #                description: Firstname of the user
  #              lastname:
  #                type: string
  #                description: Lastname of the user
  #              birthdate:
  #                type: string
  #                description: Birthdate of the user
  #            required: ['filter', 'id', 'email', 'password', 'firstname', 'lastname', 'birthdate']
  #            $ref: '#/components/schemas/User'
  #    responses:
  #      202:
  #        description: User "updated"
  #      404:
  #        description: User not found
  #      default:
  #        description: An error occured during updating the user
  /user_email/{user_email}:
    get:
      tags: [ User ]
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
  /myaccount/set_content:
    put:
      summary: set to True/False the content filter of the user
      tags: [ UserData ]
      operationId: mib.resources.users.content_filter
      requestBody:
        required: True
        content:
          application/json:
            schema: 
              type: object
              properties: 
                filter: 
                  type: boolean
                  description: content filter that allow to show or not bad words
                id:
                  type: integer
                  description: id of the user
              required: ['filter', 'id']
      responses: 
        200:
          description: filter updated correctly
        
  /authenticate:
    post:
      summary: Authenticate a user
      tags: [ Users ]
      operationId: mib.resources.auth.authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        400:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
  /user/blacklist/{user_id}:
    get:
      summary: Retrieve a list of users
      tags: [ User ]
      operationId: mib.resources.users.get_blacklist
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Black list of user <user_id>
        404:
          description: No list found
        default:
          description: Error while getting list of user
  
  /user/blacklist/target:
    post:
      tags: [ User ]
      description: Report a user by its id
      operationId: mib.resources.users.post_blacklist_target
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlackId'
     
     
      responses:
        200:
          description: User inserted
        404:
          description: User not found
        default:
          description: An error occured during the insertion in blacklist

components:
  schemas:

    BlackId:
      required:
        - user_id
        - black_id
      type: object
      properties:
        user_id:
          type: integer
          description: Customer email
          example: 1
          format: int64
        black_id:
          type: integer
          description: Customer email
          example: 2
          format: int64


    User:
      required:
        - firstname
        - lastname
        - email
        - birthdate
      type: object
      properties:
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2000'
          format: date
        phone:
          type: string
          description: Customer phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
    
    UpdateUser:
      required:
        - email
        - password
        - phone
      type: object
      properties:
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
        phone:
          type: string
          description: Customer phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25
